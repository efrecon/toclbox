if {"::tcltest" ni [namespace children]} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

::tcl::tm::path add [file normalize [file join [file dirname [info script]] ..]]
package require toclbox::log
package require toclbox::common

test log-1.1 {Check default log} -body {
    toclbox::log::logger
} -result stderr

test log-2.1 {Changing to stdout} -body {
    toclbox::log::logger stdout
} -result stdout -cleanup {
    toclbox::log::logger stderr
}

test log-3.1 {Testing keeping stderr open} -body {
    toclbox::log::logger stdout
    puts stderr "Still open"
} -errorOutput "Still open*" -match glob -cleanup {
    toclbox::log::logger stderr    
}

test log-4.1 {Testing logging to fd} -body {
    set chars [split {abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789} ""]
    set fname "__test"
    for {set i 0} {$i<8} {incr i} {
        append fname [lindex $chars [expr {int(rand()*[llength $chars])}]]
    }
    append fname ".log"
    set fullpath [file join [file dirname [info script]] $fname]
    set fd [open $fullpath w]
    toclbox::log::logger $fd
    expr [file size $fullpath]>0
} -result 1 -cleanup {
    toclbox::log::logger stderr
    file delete -force -- $fullpath
}

test log-5.1 {Testing logging to filenname} -body {
    set chars [split {abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789} ""]
    set fname "__test"
    for {set i 0} {$i<8} {incr i} {
        append fname [lindex $chars [expr {int(rand()*[llength $chars])}]]
    }
    append fname ".log"
    set fullpath [file join [file dirname [info script]] $fname]
    toclbox::log::logger $fullpath
    expr [file size $fullpath]>0
} -result 1 -cleanup {
    toclbox::log::logger stderr
    file delete -force -- $fullpath
}

test log-6.1 {Testing logging to command} -body {
    proc mylog {lvl pkg msg} {
        set ::__received [list $lvl $pkg $msg]
    }
    toclbox::log::logger @mylog
    llength $::__received
} -result 3 -cleanup {
    toclbox::log::logger stderr
    rename mylog {}
    unset ::__received
}

test log-7.1 {Testing verbosity collect} -body {
    llength [toclbox::log::verbosity]
} -result 2

test log-8.1 {Testing setting verbosity} -body {
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule DEBUG
    toclbox::log::debug DEBUG "This is an output" fakemodule
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
} -errorOutput "*This is an output*" -match glob


test log-9.1 {Testing setting lower verbosity} -body {
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule DEBUG
    toclbox::log::debug INFO "This is an output" fakemodule
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
} -errorOutput "*This is an output*" -match glob


test log-10.1 {Testing setting higher verbosity} -body {
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule INFO
    toclbox::log::debug DEBUG "This is an output" fakemodule
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
} -errorOutput ""


test log-11.1 {Testing setting several verbosities} -body {
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule DEBUG aPackage INFO
    toclbox::log::debug INFO "This is an output" aPackage
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
} -errorOutput "*aPackage*This is an output*" -match glob


test log-20.1 {Testing default verbosity format output} -body {
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule DEBUG
    toclbox::log::debug DEBUG "This is an output" fakemodule
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
} -errorOutput {\[???????? ??????\] \[debug\] \[fakemodule\] This is an output*} -match glob


test log-21.1 {Testing changing verbosity format output} -body {
    set ::__hdr [::toclbox::common::defaults ::toclbox::log -header]
    ::toclbox::common::defaults ::toclbox::log -header "%pkg% -- %Y%m%d %H%M%S -- %lvl%: "
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule DEBUG
    toclbox::log::debug DEBUG "This is an output" fakemodule
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
    ::toclbox::common::defaults ::toclbox::log -header $::__hdr
    unset ::__hdr
} -errorOutput {fakemodule -- ???????? ?????? -- debug: This is an output*} -match glob


test log-22.1 {Testing changing format output to empty} -body {
    set ::__hdr [::toclbox::common::defaults ::toclbox::log -header]
    ::toclbox::common::defaults ::toclbox::log -header ""
    set ::__oldverbose [toclbox::log::verbosity]
    toclbox::log::verbosity fakemodule DEBUG
    toclbox::log::debug DEBUG "This is an output" fakemodule
} -cleanup {
    toclbox::log::verbosity $::__oldverbose
    unset ::__oldverbose
    ::toclbox::common::defaults ::toclbox::log -header $::__hdr
    unset ::__hdr
} -errorOutput {This is an output*} -match glob


test log-30.1 {Testing formating core (default)} -body {
    toclbox::log::format DEBUG fakemodule "This is an output"
} -result {\[???????? ??????\] \[debug\] \[fakemodule\] This is an output} -match glob


test log-31.1 {Testing formating unknown level} -body {
    toclbox::log::format VIP fakemodule "This is an output"
} -result {\[???????? ??????\] \[--u-n-k-n-o-w-n--\] \[fakemodule\] This is an output} -match glob


