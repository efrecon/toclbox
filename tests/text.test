if {"::tcltest" ni [namespace children]} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

::tcl::tm::path add [file normalize [file join [file dirname [info script]] ..]]
package require toclbox::text
package require toclbox::log

toclbox::log::verbosity text 0

test text-1.1 {Resolving HOME} -body {
    ::toclbox::text::resolve "%HOME%"
} -result "$::env(HOME)"

test text-2.1 {Resolving several references to HOME} -body {
    ::toclbox::text::resolve "Is %HOME% your ~HOME~?"
} -result "Is $::env(HOME) your $::env(HOME)?"

test text-3.1 {Resolving HOME and additional keys} -body {
    ::toclbox::text::resolve "Is %HOME% your ~MAISON~ and your ~RESIDENCE~?" [list MAISON home RESIDENCE residence]
} -result "Is $::env(HOME) your home and your residence?"

test text-4.1 {Resolving inexisting key to defaults} -body {
    ::toclbox::text::resolve "%I3X1st1ng|some value%"
} -result "some value"

test text-5.1 {Resolving key when it is set instead of its default value} -body {
    ::toclbox::text::resolve "%I3X1st1ng|some value%" [list I3X1st1ng test]
} -result "test"

test text-6.1 {Using markers in key name} -body {
    ::toclbox::text::resolve "%I3X1s~1ng|some value%"
} -result "some value"

test text-7.1 {Using default separators in defaults} -body {
    ::toclbox::text::resolve "%I3X1st1ng|/a/path%"
} -result "/a/path"

test text-8.1 {Failing to resolve inexisting key} -body {
    ::toclbox::text::resolve "%I3X1st1ng%"
} -result "%I3X1st1ng%"

test text-9.1 {Testing program-dependent keys} -body {
    ::toclbox::text::resolve "%progdir%/~prgname~"
} -result "[file normalize [file dirname $::argv0]]/[file rootname [file tail $::argv0]]"

test text-9.2 {Testing program-dependent true locations keys} -body {
    ::toclbox::text::resolve "%bindir%/~binname~"
} -result "[file normalize [file dirname $::argv0]]/[file rootname [file tail $::argv0]]"

test text-10.1 {Testing split protection} -body {
    ::toclbox::text::split {a/path/to\/test/thi\/ngs/out} /
} -result {a path to/test thi/ngs out}

test text-11.1 {Testing leading separator in split} -body {
    ::toclbox::text::split {/a/path/to\/test/thi\/ngs/out} /
} -result {{} a path to/test thi/ngs out}

test text-12.1 {Testing ending separator in split} -body {
    ::toclbox::text::split {a/path/to\/test/thi\/ngs/out/} /
} -result {a path to/test thi/ngs out {}}

test text-13.1 {Testing split of empty string} -body {
    ::toclbox::text::split "" /
} -result {}

test text-14.1 {Testing split of separator} -body {
    ::toclbox::text::split "/" /
} -result {{} {}}

test text-14.1 {Testing split on empty separator} -body {
    ::toclbox::text::split "abc" ""
} -result {a b c}

test text-15.1 {Testing ending on protected separator} -body {
    ::toclbox::text::split {abc\/} /
} -result {abc/}


test text-20.1 {Testing human output of small string} -body {
    ::toclbox::text::human "human"
} -result "human"

test text-21.1 {Testing human output of mixed chars} -body {
    ::toclbox::text::human "\thuman\n"
} -result ".human. (hex: 09 68 75 6D 61 6E 0A)"

test text-22.1 {Testing ellipsis of long string} -body {
    ::toclbox::text::human "This is a very long sentence that is completely meaningless, but long enough to be shortened when printed out."
} -result "This is a very long (..)"

test text-30.1 {Testing inlining} -body {
    set var "@%prgdir%/dummy.lst"
    ::toclbox::text::offload var 3 dummy
    return [llength $var]
} -result 6

cleanupTests